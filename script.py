

import os, sys, time, json
import pandas as pd
import msal, requests

# ====== –ö–û–ù–§–ò–ì ======
CLIENT_ID = "4e7eafee-f93e-4e78-a003-1e5f3a0835b3"
TENANT_ID = "organizations"
SCOPES = ["Mail.Send"]

EXCEL_PATH = r"C:\Users\nuriy\Downloads\student_debt.xlsx"
GRAPH_SEND_URL = "https://graph.microsoft.com/v1.0/me/sendMail"

SEND_DELAY_SEC = 0.4
DRY_RUN = False
# =====================


def ensure_columns(df):
    need = {"Email", "–§–ò–û", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "–§–∞–∫—É–ª—å—Ç–µ—Ç", "–£—Ä–æ–≤–µ–Ω—å"}
    miss = need - set(df.columns)
    if miss:
        raise ValueError("–í Excel –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤: " + ", ".join(miss))


def pick_recipients(df):
    print("\nüì© –ö–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–∞?")
    print("1 - –í—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º")
    print("2 - –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É –ø–æ email")
    print("3 - –í—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ")
    print("4 - –í—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º –ø–æ —É—Ä–æ–≤–Ω—é (–ë–∞–∫–∞–ª–∞–≤—Ä / –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞)")
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞: ").strip()

    df["Email"] = df["Email"].astype(str).str.strip()
    df["–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"] = df["–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"].astype(str).str.strip()
    df["–£—Ä–æ–≤–µ–Ω—å"] = df["–£—Ä–æ–≤–µ–Ω—å"].astype(str).str.strip()

    if choice == "1":
        recips = df["Email"].dropna().tolist()
    elif choice == "2":
        email = input("–í–≤–µ–¥–∏—Ç–µ email —Å—Ç—É–¥–µ–Ω—Ç–∞: ").strip()
        recips = df.loc[df["Email"].str.lower() == email.lower(), "Email"].tolist()
    elif choice == "3":
        disc = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: ").strip()
        recips = df.loc[df["–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"].str.lower() == disc.lower(), "Email"].tolist()
    elif choice == "4":
        level = input("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å (–ë–∞–∫–∞–ª–∞–≤—Ä / –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞): ").strip().lower()
        recips = df.loc[df["–£—Ä–æ–≤–µ–Ω—å"].str.lower() == level, "Email"].tolist()
    else:
        recips = []

    recips = sorted({r for r in recips if r and r != "nan"})
    return recips


def build_subject_body(student_name, discipline, faculty):
    subject = f"–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {discipline}"
    html = f"""
    <html>
    <body style="font-family: Arial; color: #333;">
      <p>–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) <b>{student_name}</b>,</p>
      <p>–°–æ–æ–±—â–∞–µ–º –í–∞–º, —á—Ç–æ —É –í–∞—Å –∏–º–µ–µ—Ç—Å—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ <b>"{discipline}"</b>.</p>
      <p>–ü—Ä–æ—Å–∏–º –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —É—á–µ–±–Ω—ã–º –æ—Ñ–∏—Å–æ–º –¥–ª—è –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è.</p>
      <p style="margin-top:20px;">
         –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
         <b>–î–µ–∫–∞–Ω–∞—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {faculty}</b><br>
         –ê—Å—Ç–∞–Ω–∞ IT –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
      </p>
    </body>
    </html>
    """.strip()
    return subject, html


def acquire_token():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ MSAL Device Code Flow"""
    tried = []

    def _try_authority(auth_tenant):
        authority = f"https://login.microsoftonline.com/{auth_tenant}"
        app = msal.PublicClientApplication(CLIENT_ID, authority=authority)
        result = app.acquire_token_silent(SCOPES, account=None)
        if result and "access_token" in result:
            return result["access_token"]

        try:
            flow = app.initiate_device_flow(scopes=SCOPES)
            if "user_code" not in flow:
                raise RuntimeError(flow.get("error_description") or "Device Code Flow init failed")
            print(f"\nüîê –û—Ç–∫—Ä–æ–π—Ç–µ {flow['verification_uri']} –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥: {flow['user_code']}\n")
            result = app.acquire_token_by_device_flow(flow)
            if "access_token" in result:
                return result["access_token"]
            raise RuntimeError(result.get("error_description") or str(result))
        except Exception as e:
            tried.append((authority, f"device_code: {e}"))
            return None

    tok = _try_authority(TENANT_ID)
    if tok:
        return tok

    tok = _try_authority("organizations")
    if tok:
        return tok

    tried.append(("interactive/organizations", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥"))
    msg = ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω (–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏):"]
    for a, err in tried:
        msg.append(f" - {a}: {err}")
    raise RuntimeError("\n".join(msg))


def send_mail_graph(access_token, to_email, subject, html_body):
    payload = {
        "message": {
            "subject": subject,
            "body": {"contentType": "HTML", "content": html_body},
            "toRecipients": [{"emailAddress": {"address": to_email}}],
        },
        "saveToSentItems": True
    }

    if DRY_RUN:
        print(f"[DRY-RUN] ‚Üí {to_email} | {subject}")
        return True, None

    resp = requests.post(
        GRAPH_SEND_URL,
        headers={
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        },
        data=json.dumps(payload),
        timeout=30
    )
    if resp.status_code in (200, 202):
        return True, None
    else:
        try:
            detail = resp.json()
        except Exception:
            detail = resp.text
        return False, f"{resp.status_code}: {detail}"


def main():
    if not os.path.exists(EXCEL_PATH):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {EXCEL_PATH}")
        sys.exit(1)

    df = pd.read_excel(EXCEL_PATH)
    ensure_columns(df)


    pd.set_option('display.max_columns', None)
    pd.set_option('display.max_rows', None)
    print("\nüìä –î–∞–Ω–Ω—ã–µ –∏–∑ Excel:\n")
    print(df[["–§–ò–û", "Email", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "–§–∞–∫—É–ª—å—Ç–µ—Ç", "–£—Ä–æ–≤–µ–Ω—å"]].to_string(index=False))
    print("\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:", len(df))
   
    recipients = pick_recipients(df)
    if not recipients:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")
        sys.exit(0)

    preview_df = df[df["Email"].isin(recipients)][["–§–ò–û", "Email", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "–§–∞–∫—É–ª—å—Ç–µ—Ç", "–£—Ä–æ–≤–µ–Ω—å"]]
    print("\nüìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:\n")
    print(preview_df.to_string(index=False))
    print(f"\n–ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {len(recipients)}")

    if input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É? (y/n): ").strip().lower() != "y":
        print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        sys.exit(0)

    df_idx = df.set_index(df["Email"].str.lower())

    try:
        token = acquire_token()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", e)
        sys.exit(1)

    ok = fail = 0
    for email in recipients:
        row = df_idx.loc[email.lower()]
        if isinstance(row, pd.DataFrame):
            row = row.iloc[0]

        subject, html = build_subject_body(
            str(row["–§–ò–û"]).strip(),
            str(row["–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"]).strip(),
            str(row["–§–∞–∫—É–ª—å—Ç–µ—Ç"]).strip()
        )

        success, err = send_mail_graph(token, email, subject, html)
        if success:
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {email}")
            ok += 1
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {email}: {err}")
            fail += 1

        time.sleep(SEND_DELAY_SEC)

    print("\n===== –ò–¢–û–ì =====")
    print(f"–£—Å–ø–µ—à–Ω–æ: {ok}")
    print(f"–û—à–∏–±–∫–∏:  {fail}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
